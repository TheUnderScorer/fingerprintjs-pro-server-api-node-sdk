name: Functional tests
on:
  workflow_dispatch:
  pull_request_target:
  schedule:
    - cron: '0 5 * * *'
jobs:
  build:
    name: 'Build sdk on node ${{ matrix.node-version }}'
    runs-on: ubuntu-latest
    steps:
      - if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('yarn.lock') }}
          restore-keys: nodemodules-
      - name: Install Dependencies and prepare packages
        run: yarn install --ignore-engines
        env:
          CI: true
      - name: Build
        run: yarn build
      - uses: actions/upload-artifact@v3
        with:
          name: node-sdk-artifact
          path: ./dist
  functional_tests:
    name: 'Smoke test on node ${{ matrix.node-version }}'
    needs: build
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 1
      matrix:
        node-version: [ 10, 12, 14, 16, 17, 18, 19 ]

    steps:
      - if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: node-sdk-artifact
          path: ./dist
      - name: Install Dependencies for SDK
        run: yarn install --ignore-engines --production=true
        env:
          CI: true
      - name: Install Dependencies for example
        run: yarn --ignore-engines install
        working-directory: ./example
        env:
          CI: true
      - name: Run test
        run: node index.js
        working-directory: ./example
        env:
          API_KEY: '${{ secrets.PRIVATE_KEY }}'
          VISITOR_ID: '${{ secrets.VISITOR_ID }}'
          REQUEST_ID: '${{ secrets.REQUEST_ID }}'
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@0d9c6ff1de9903da88d24c0564f6e83cb28faca9
        with:
          status: ${{ job.status }}
          notification_title: 'Node ${{ matrix.node-version }} SDK Functional Test has {status_message}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
